/*
 * TaxPayer.c
 *
 *  Created on: 29 Apr 2021
 *      Author: Nicolas Alejandro Penayo
 *     Description: Struct TaxPayer y funciones relacionadas
 */

#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "tpListays.h"
#include "Taxpayer.h"

#include "Validations.h"
#define MAX_ATTEMPTS 3
#define MIN_DOCKET 1000
int docket = MIN_DOCKET;
//CRUD Taxpayer
int createTaxPayer(TaxPayer *tpList, int tpLens, int index, Income *incomes,
		int icLens) {
	int resp = 0;
	char sexValues[2] = { 'f', 'm' };
	char gender;
	int age;
	int score1;
	int score2;
	char surname[30];
	int id_degree;
	initializeChar(surname);
	printf("\n*************** Alta alumnos *********");
	if (validChar("Sexo(f/m):", "Error.Dato ingresado incorrecto", &gender,
			sexValues, 2, MAX_ATTEMPTS)
			&& validInt("Edad(+18):", "Error. La edad ingresada es invalida",
					&age, 18, 70,
					MAX_ATTEMPTS)
			&& validInt("Nota 1 (1-10): ", "Error. Nota invalida", &score1, 1,
					10,
					MAX_ATTEMPTS)
			&& validInt("Nota 2 (1-10): ", "Error. Nota invalida", &score2, 1,
					10,
					MAX_ATTEMPTS) && appendToString("Apellido", surname, 30)
			&& validincome(incomes, icLens, &id_degree, MAX_ATTEMPTS)) {

		TaxPayer newTaxPayer;
		newTaxPayer.docket = docket;
		docket++;
		strcpy(newTaxPayer.surname, surname);
		newTaxPayer.score1 = score1;
		newTaxPayer.score2 = score2;
		newTaxPayer.scoreAvg = (float) (newTaxPayer.score1 + newTaxPayer.score2)
				/ 2;
		newTaxPayer.gender = gender;
		newTaxPayer.age = age;
		newTaxPayer.id_degree = id_degree;
		newTaxPayer.assigned = 1;
		tpList[index] = newTaxPayer;
		resp = 1;
	}else{
		printf("\nOcurrio un error en la carga de datos.");
	}
	return resp;
}
void indexTaxpayer(TaxPayer tpList[], int tpListLength, Income incomes[],
		int icLens) {
	printf("\n************ Listado de Alumnos ************");
	printf("\n\n | %6s | %10s | %4s | %4s | %6s | %6s | %8s | %7s", "Legajo",
			"Apellido", "Edad", "Sexo", "Nota 1", "Nota 2", "Promedio",
			"CtpListera");
	printf(
			"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ");

	for (int i = 0; i < tpListLength; i++) {
		showTaxPayer(tpList[i], incomes, icLens);
	}
}
void showTaxPayer(TaxPayer TaxPayer, Income incomes[], int icLens) {
	char degDescription[20];
	getDescription(incomes, icLens, TaxPayer.id_degree, degDescription);
	if (TaxPayer.assigned) {
		TaxPayer.surname[0] = toupper(TaxPayer.surname[0]);
		printf("\n | %6d | %-10s | %4d | %4c | %6d | %6d | %8.2f | %7s",
				TaxPayer.docket, TaxPayer.surname, TaxPayer.age, TaxPayer.gender,
				TaxPayer.score1, TaxPayer.score2, TaxPayer.scoreAvg,
				degDescription);
	}

}
int updateTaxPayer(TaxPayer TaxPayer, TaxPayer *Taxpayer, int tpListLength) {
	int resp = 0;
	for (int i = 0; i < tpListLength; i++) {
		if (Taxpayer[i].docket == TaxPayer.docket) {
			Taxpayer[i] = TaxPayer;
			resp = 1;
		}
	}

	return resp;
}
int deleteTaxPayer(TaxPayer TaxPayer, TaxPayer *Taxpayer, int tpListLength) {
	int resp = 0;
	for (int i = 0; i < tpListLength; i++) {
		if (Taxpayer[i].docket == TaxPayer.docket) {
			TaxPayer.assigned = 0;
			Taxpayer[i] = TaxPayer;
			resp = 1;
		}
	}
	return resp;
}
//Get Taxpayer attributes
int getTaxPayerByDocket(TaxPayer tpList[], int tpListLength, int to_find,
		Income incomes[], int icLens, TaxPayer *output) {
	int resp = 0;
	for (int i = 0; i < tpListLength; i++) {
		if (tpList[i].docket == to_find && tpList[i].assigned) {
			*output = tpList[i];
			resp = 1;
			break;
		}
	}
	return resp;
}
void initializeTaxpayer(TaxPayer Taxpayer[], int tpListLength) {
	for (int i = 0; i < tpListLength; i++) {
		Taxpayer[i].assigned = 0;
	}

}
int getUnassigned(TaxPayer Taxpayer[], int tpListLength, int *to_assign) {
	int resp = 0;
	for (int i = 0; i < tpListLength; i++) {
		if (!(Taxpayer[i].assigned)) {
			*to_assign = i;
			resp = 1;
			break;
		}
	}
	return resp;
}
int isEmpty(TaxPayer Taxpayer[], int tpListLength) {
	int resp = 0;
	int aux = 0;
	for (int i = 0; i < tpListLength; i++) {
		if (!Taxpayer[i].assigned) {
			aux++;
		}
	}
	if (aux == tpListLength) {
		resp = 1;
	}
	return resp;
}
void orderBy(TaxPayer *taxpayer, int tpLens, Income *icList,
		int icLens, char arg, char mode) {
	int auxInt[20];
	float auxFloat[20];
	initializeInt(auxInt, STRING_LENGTH);
	initializeFloat(auxFloat, 20);
	switch (arg) {
	//Por legajo
	case 'a':
		for (int i = 0; i < tpLens; i++) {
			if (taxpayer[i].assigned) {
				appendIntTotpListay(taxpayer[i].docket, auxInt, i);
			}
		}
		if (mode == 'a') {
			quicksortIntAsc(&auxInt[tpLens], 0, tpLens);
			for (int i = 0; i < tpLens - 1; i++) {
				swapTaxPayer(taxpayer, i, i + 1);
			}
		} else {

		}
		break;
		//Por apellido
	case 'b':
		if (mode == 'a') {
			for (int i = 0; i < tpLens - 1; i++) {
				for (int j = i; j < tpLens; j++) {
					if (Taxpayer[i].assigned && Taxpayer[j].assigned) {
						if (strcmp(Taxpayer[i].surname, Taxpayer[j].surname)
								> 0) {
							swapTaxPayer(Taxpayer, i, j);
						}
					}
				}

			}
		} else {

		}
		break;
		//Por promedio, si el promedio es igual, por legajo
	case 'c':
		if (mode == 'a') {
			for (int i = 0; i < tpLens; i++) {

			}
		} else {

		}
		break;
	}
}

void swapTaxPayer(TaxPayer *taxpayer, int a, int b) {
	TaxPayer aux;
	aux = Taxpayer[a];
	Taxpayer[a] = Taxpayer[b];
	Taxpayer[b] = aux;
}
